// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ResultsContainer
    results={
      Array [
        Object {
          "data": Object {
            "foo": "foo",
          },
          "getRaw": [Function],
          "getSnippet": [Function],
        },
        Object {
          "data": Object {
            "bar": "bar",
          },
          "getRaw": [Function],
          "getSnippet": [Function],
        },
      ]
    }
    titleField="title"
    trackClickThrough={[MockFunction]}
    urlField="url"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Result
          fields={
            Object {
              "foo": "<em>foo</em>",
            }
          }
          onClickLink={[Function]}
          title="<em>title</em>"
          url="url"
        />,
        <Result
          fields={
            Object {
              "bar": "<em>bar</em>",
            }
          }
          onClickLink={[Function]}
          title="<em>title</em>"
          url="url"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "result-id",
        "nodeType": "function",
        "props": Object {
          "fields": Object {
            "foo": "<em>foo</em>",
          },
          "onClickLink": [Function],
          "title": "<em>title</em>",
          "url": "url",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "result-id",
        "nodeType": "function",
        "props": Object {
          "fields": Object {
            "bar": "<em>bar</em>",
          },
          "onClickLink": [Function],
          "title": "<em>title</em>",
          "url": "url",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Result
            fields={
              Object {
                "foo": "<em>foo</em>",
              }
            }
            onClickLink={[Function]}
            title="<em>title</em>"
            url="url"
          />,
          <Result
            fields={
              Object {
                "bar": "<em>bar</em>",
              }
            }
            onClickLink={[Function]}
            title="<em>title</em>"
            url="url"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "result-id",
          "nodeType": "function",
          "props": Object {
            "fields": Object {
              "foo": "<em>foo</em>",
            },
            "onClickLink": [Function],
            "title": "<em>title</em>",
            "url": "url",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "result-id",
          "nodeType": "function",
          "props": Object {
            "fields": Object {
              "bar": "<em>bar</em>",
            },
            "onClickLink": [Function],
            "title": "<em>title</em>",
            "url": "url",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
